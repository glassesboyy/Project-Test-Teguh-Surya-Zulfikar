import { Suspense } from 'react';
import { fetchIdeas } from '@/lib/api/ideas';
import IdeasList from '@/components/ideas/IdeasList';
import IdeasListSkeleton from '@/components/ideas/IdeasListSkeleton';
import { PAGINATION } from '@/lib/constants/api';

interface PageProps {
  searchParams: {
    page?: string;
    pageSize?: string;
    sort?: string;
  };
}

// Ini adalah contoh implementasi server-side pagination
// Bisa digunakan untuk mengganti page.tsx yang sekarang jika ingin full server-side
export default async function IdeasPageServerSide({ searchParams }: PageProps) {
  const page = Number(searchParams.page) || PAGINATION.DEFAULT_PAGE;
  const pageSize = Number(searchParams.pageSize) || PAGINATION.DEFAULT_CLIENT_PAGE_SIZE;
  const sort = searchParams.sort || '-published_at';

  return (
    <div className="mt-10">
      {/* Header bisa dibuat sebagai komponen terpisah */}
      <div className="h-[400px] bg-gradient-to-r from-orange-400 to-orange-600 flex items-center justify-center">
        <h1 className="text-4xl md:text-6xl font-bold text-white text-center drop-shadow-lg">
          Ideas & Insights
        </h1>
      </div>

      <div className="max-w-5xl mx-auto p-6">
        <Suspense fallback={<IdeasListSkeleton />}>
          <IdeasServerContent page={page} pageSize={pageSize} sort={sort} />
        </Suspense>
      </div>
    </div>
  );
}

async function IdeasServerContent({ 
  page, 
  pageSize, 
  sort 
}: { 
  page: number; 
  pageSize: number; 
  sort: string; 
}) {
  try {
    const response = await fetchIdeas({ page, pageSize, sort });
    
    return (
      <IdeasList
        ideas={response.data}
        currentPage={page}
        pageSize={pageSize}
        sort={sort}
        total={response.meta.total}
        totalPages={response.meta.last_page}
      />
    );
  } catch (error) {
    throw new Error('Failed to load ideas');
  }
}
